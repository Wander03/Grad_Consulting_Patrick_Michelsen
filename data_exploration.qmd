---
title: "EDA"
author: "Andrew Kerr"
format: html
editor: source
toc: true
code-fold: true
embed-resources: true
---

## Set-up

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readxl)
library(writexl)
library(patchwork)
library(glmmTMB)
library(car)
library(emmeans)
library(nlme)
library(lmerTest)
library(DHARMa)
library(brms)
```

## Data Read-in

### Convert 3 .csv to 1 Excel File (DO NOT NEED TO RUN)

```{r}
#| message: false
#| eval: false
df_combined <- read_csv(here::here("data", "Combined_Master.csv")) %>% clean_names()
df_year_1 <- read_csv(here::here("data", "Year1_Master.csv")) %>% clean_names()
df_year_2 <- read_csv(here::here("data", "Year2_Master.csv")) %>% clean_names()

# Change date format
df_combined <- df_combined %>%
  mutate(date = as.Date(date, format="%m_%d_%y")) %>%
  select(-starts_with("x"))

df_year_1 <- df_year_1 %>%
  mutate(date = as.Date(date, format="%m_%d_%y")) %>%
  select(-starts_with("x"))

df_year_2 <- df_year_2 %>%
  mutate(date = as.Date(date, format="%m_%d_%y")) %>%
  select(-starts_with("x"))

# Save as single Excel File
out <- list("combined" = df_combined, "year_1" = df_year_1, "year_2" = df_year_2)
write_xlsx(out, "data/Master.xlsx")
```

### Read-in Data from Excel File

```{r}
df_combined <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "combined")
df_year_1 <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "year_1")
df_year_2 <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "year_2")
```

```{r}
df_combined <- df_combined %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )

df_year_1 <- df_year_1 %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )

df_year_2 <- df_year_2 %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )
```

## EDA

### Create Datasets where LOD is 0 or NA

```{r}
#| warning: false
response_vars <- c("nh4", "no3", "mg", "p", "ec", "p_h")

df_combined_LOD_0 <- df_combined %>%
    mutate(across(
    all_of(response_vars), 
    ~ {
      # Replace "LOD" with 0
      x <- ifelse(.x == "LOD", 0, .x)
      as.numeric(x)
    }
  ))

df_combined_LOD_NA <- df_combined %>%
    mutate(across(
    all_of(response_vars), 
    ~ {
      # Replace "LOD" with NA
      x <- ifelse(.x == "LOD", NA, .x)
      as.numeric(x)
    }
  ))
```

### Count of LOD

```{r}
df_combined %>%
  group_by(treatment) %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == "LOD", na.rm = T)
      }
    ))
```

### Count of Zeros

```{r}
prop_zero_0 <- df_combined_LOD_0 %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_zero")

prop_zero_NA <- df_combined_LOD_NA %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_zero")

prop_zero_0 %>%
  left_join(prop_zero_NA, by = "response", suffix = c("_0", "_NA")) %>%
  arrange(-prop_zero_0)

prop_zero_0 <- df_combined_LOD_0 %>%
  group_by(study_year) %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = -study_year, names_to = "response", values_to = "prop_zero")

prop_zero_NA <- df_combined_LOD_NA %>%
  group_by(study_year) %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = -study_year, names_to = "response", values_to = "prop_zero")

prop_zero_0 %>%
  left_join(prop_zero_NA, by = c("response", "study_year"), suffix = c("_0", "_NA")) %>%
  arrange(study_year, -prop_zero_0)
```

### Negative Values

```{r}
prop_neg_0 <- df_combined_LOD_0 %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x < 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_negative")

prop_neg_NA <- df_combined_LOD_NA %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x < 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_negative")

prop_neg_0 %>%
  left_join(prop_neg_NA, by = "response", suffix = c("_0", "_NA")) %>%
  arrange(-prop_negative_0)
```

### Concentration by Treatment Box Plots

```{r}
#| fig.width: 14
#| fig.height: 10
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}

plot_concentration <- function(r, data) {
  data %>% 
    filter(.data[[r]] > 0) %>%
    ggplot(aes(x = treatment, y = .data[[r]], fill = treatment)) +
      geom_boxplot(alpha = 0.7) +
      geom_point(alpha = 0.3) +
      facet_wrap(vars(study_year), scales = "free") +
      labs(title = paste0(capwords(r), " Concentration (Non-Zero) by Treatment"), x = "Treatment", y = capwords(r)) +
      theme_bw()
}

plots_0 <- map(response_vars, plot_concentration, data = df_combined_LOD_0)
wrap_plots(plots_0, ncol = 2, guides = "collect")

# It will be the same since we are plotting non-zeros
# plots_NA <- map(response_vars, plot_concentration, data = df_combined_LOD_NA)
# wrap_plots(plots_NA, ncol = 2, guides = "collect")
```


### Plot Response Variables Over Time

```{r}
#| warning: false
#| fig.width: 14
#| fig.height: 10
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}

plot_response <- function(r, data, by) {
  data %>%
    ggplot(aes(x = date, y = .data[[r]], color = .data[[by]])) +
    facet_wrap(vars(study_year), scales = "free") +
    geom_point() +
    geom_line() +
    theme_bw(base_size = 12) +
    theme(legend.position = "none") +
    labs(
      title = paste0(capwords(r), " Over Time"),
      x = "Date"
    )
}
  
plots_0 <- map(response_vars, plot_response, data = df_combined_LOD_0, by = "sample_id")
wrap_plots(plots_0, ncol = 2)

plots_NA <- map(response_vars, plot_response, data = df_combined_LOD_NA, by = "sample_id")
wrap_plots(plots_NA, ncol = 2)
```

## Models

### Responses with no Zero

#### Data

```{r}
df_model <- df_combined_LOD_0 %>%
  filter(study_year == 1) %>% # Can change this to only look at year 2, or comment out to look at both years
  mutate(
    date = factor(date),
    treatment = factor(treatment),
    site = factor(site),
    block = factor(block),
    
    # Create combined grouping factors
    site_block_id = interaction(site, block, drop = TRUE),
    trt_site_block_id = interaction(treatment, site, block, drop = TRUE)
  )
```

#### EC

```{r}
# fit_lme_ec <- lme(
#   fixed = ec ~ date * treatment,
#   random = list(
#     site_block_id = ~ 1, # Random intercept for site:block combinations
#     trt_site_block_id = ~ 1 # Random intercept for treatment:site:block combinations
#   ),
#   data = df_model,
#   na.action = na.exclude
# )
# 
# Anova(fit_lme_ec)
# 
# plot(fitted(fit_lme_ec), residuals(fit_lme_ec),
#      xlab = "Fitted Values",
#      ylab = "Residuals",
#      main = "Residuals vs. Fitted Values")
# abline(h = 0, col = "red", lty = 2)
# 
# emmip(fit_lme_ec, treatment ~ date, type = "response", CIs = T) + theme_bw()
```

```{r}
fit_glmer_gamma_ec <- glmer(
  ec ~ date * treatment +
    (1 | site_block_id) +
    (1 | trt_site_block_id),
  data = df_model,
  family = Gamma(link = "log"),
  control = glmerControl(optimizer = "bobyqa"), # default optimizer did not converge
  na.action = na.exclude
)

summary(fit_glmer_gamma_ec)

plot(fitted(fit_glmer_gamma_ec), residuals(fit_glmer_gamma_ec),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)

emmip(fit_glmer_gamma_ec, treatment ~ date, type = "response", CIs = T) + theme_bw()
```

#### Ph

```{r}
fit_lme_ph <- lme(
  fixed = p_h ~ as.factor(date) * treatment,
  random = list(
    site_block_id = ~ 1, # Random intercept for site:block combinations
    trt_site_block_id = ~ 1 # Random intercept for treatment:site:block combinations
  ),
  data = df_model,
  na.action = na.exclude
)

Anova(fit_lme_ph)
S(fit_lme_ph)

plot(fitted(fit_lme_ph), residuals(fit_lme_ph),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)

emmip(fit_lme_ph, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = df_model,
             aes(x = date, y = p_h, color = treatment),
             alpha = 0.2,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  theme_bw()
```

### Left-Censored Mixed Model Testing (brms)

#### Data

```{r}
response_vars <- c("nh4", "no3", "mg", "p")

lc_model_data <- df_combined %>%
  mutate(
    nh4_censored = ifelse(nh4 == "LOD", -1, 0),
    no3_censored = ifelse(no3 == "LOD", -1, 0),
    mg_censored = ifelse(mg == "LOD", -1, 0),
    p_censored = ifelse(p == "LOD", -1, 0),
    
    nh4 = ifelse(nh4 == "LOD", nh4_lod, as.numeric(nh4)),
    no3 = ifelse(no3 == "LOD", n03_lod, as.numeric(no3)),
    mg = ifelse(mg == "LOD", mg_lod, as.numeric(mg)),
    p = ifelse(p == "LOD", p_lod, as.numeric(p)),
    
    date = factor(date),
    treatment = factor(treatment),
    site = factor(site),
    block = factor(block),
    
    # Create combined grouping factors
    site_block_id = interaction(site, block, drop = TRUE),
    trt_site_block_id = interaction(treatment, site, block, drop = TRUE)
  )
```

#### Run and Save Models

```{r}
#| eval: false
fit_no3 <- brm(
  formula = bf(no3 | cens(no3_censored) ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id)),
  data = lc_model_data,
  family = Gamma(link = "log"),
  chains = 4,
  warmup = 1000,
  iter = 5000,
  cores = parallel::detectCores(),
  seed = 12345,
  file = here::here("models", "fit_no3")
)

fit_nh4 <- brm(
  formula = bf(nh4 | cens(nh4_censored) ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id)),
  data = lc_model_data,
  family = Gamma(link = "log"),
  chains = 4,
  warmup = 1000,
  iter = 5000,
  cores = parallel::detectCores(),
  seed = 12345,
  file = here::here("models", "fit_nh4")
)

fit_mg <- brm(
  formula = bf(mg | cens(mg_censored) ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id)),
  data = lc_model_data,
  family = Gamma(link = "log"),
  chains = 4,
  warmup = 1000,
  iter = 5000,
  cores = parallel::detectCores(),
  seed = 12345,
  file = here::here("models", "fit_mg")
)

fit_p <- brm(
  formula = bf(p | cens(p_censored) ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id)),
  data = lc_model_data,
  family = Gamma(link = "log"),
  chains = 4,
  warmup = 1000,
  iter = 5000,
  cores = parallel::detectCores(),
  seed = 12345,
  file = here::here("models", "fit_p")
)
```

```{r}
fit_no3 <- here::here("models", "fit_no3.rds")
fit_nh4 <- here::here("models", "fit_nh4.rds")
fit_mg <- here::here("models", "fit_mg.rds")
fit_p <- here::here("models", "fit_p.rds")
```

#### NO3

```{r}
summary(fit_no3)
# neff_ratio(fit_no3)
# prior_summary(fit_no3)
# plot(fit, type = "trace", nvariables = 1)

pp_check(fit_no3) + xlim(0, 100)
pp_check(fit_no3, type = "dens_overlay", ndraws = 100) + xlim(0, 100)

# loo(fit_no3)

conditional_effects(fit_no3, effects = "treatment")
conditional_effects(fit_no3, effects = "date:treatment")

emm_treatments <- emmeans(fit_no3, ~ treatment, type = "response")
emm_treatments

pairs(emm_treatments)

emmip(fit_no3, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data,
             aes(x = date, y = no3, color = as.factor(no3_censored)),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  # ylim(0, 1000) +
  theme_bw()
```

#### NH4

```{r}
summary(fit_nh4)
# neff_ratio(fit_nh4)
# prior_summary(fit_nh4)
# plot(fit, type = "trace", nvariables = 1)

pp_check(fit_nh4) + xlim(0, 10)
pp_check(fit_nh4, type = "dens_overlay", ndraws = 100) + xlim(0, 10)

# loo(fit_nh4)

conditional_effects(fit_nh4, effects = "treatment")
conditional_effects(fit_nh4, effects = "date:treatment")

emm_treatments <- emmeans(fit_nh4, ~ treatment, type = "response")
emm_treatments

pairs(emm_treatments)
plot(emm_treatments) + theme_bw()

emmip(fit_nh4, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data,
             aes(x = date, y = nh4, color = as.factor(mg_censored)),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  # ylim(0, 10) +
  theme_bw()
```

#### Mg

```{r}
summary(fit_mg)
# neff_ratio(fit_mg)
# prior_summary(fit_mg)
# plot(fit, type = "trace")

pp_check(fit_mg)
pp_check(fit_mg, type = "dens_overlay", ndraws = 100)

# loo(fit_mg)

conditional_effects(fit_mg, effects = "treatment")
conditional_effects(fit_mg, effects = "date:treatment")

emm_treatments <- emmeans(fit_mg, ~ treatment, type = "response")
emm_treatments

pairs(emm_treatments)
plot(emm_treatments) + theme_bw()

emmip(fit_mg, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data,
             aes(x = date, y = mg, color = as.factor(mg_censored)),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  theme_bw()
```

```{r}
fit_glmer_gamma_mg <- glmer(
  mg ~ date * treatment +
    (1 | site_block_id) +
    (1 | trt_site_block_id),
  data = lc_model_data %>% filter(study_year == 1),
  family = Gamma(link = "log"),
  # control = glmerControl(optimizer = "bobyqa"), # default optimizer did not converge
  na.action = na.exclude
)

summary(fit_glmer_gamma_mg)
S(fit_mg)

plot(fitted(fit_glmer_gamma_mg), residuals(fit_glmer_gamma_mg),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)

emmip(fit_glmer_gamma_mg, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data %>% filter(study_year == 1),
             aes(x = date, y = mg, color = treatment),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  theme_bw()

emmip(fit_mg, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data %>% filter(study_year == 1),
             aes(x = date, y = mg, color = treatment),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  theme_bw()
```

#### P

```{r}
summary(fit_p)
# neff_ratio(fit_p)
# prior_summary(fit_p)
# plot(fit, type = "trace", nvariables = 1)

pp_check(fit_p) + xlim(0, 1)
pp_check(fit_p, type = "dens_overlay", ndraws = 100)  + xlim(0, 1)

# loo(fit_p)

conditional_effects(fit_p, effects = "treatment")
conditional_effects(fit_p, effects = "date:treatment")

emm_treatments <- emmeans(fit_p, ~ treatment, type="response")
emm_treatments

pairs(emm_treatments)
plot(emm_treatments) + theme_bw()

emmip(fit_p, ~ date | treatment, type = "response", CIs = T) + 
  geom_point(data = lc_model_data,
             aes(x = date, y = p, color = as.factor(p_censored)),
             alpha = 0.7,
             position = position_jitterdodge(jitter.width = 0.1, dodge.width = 0.1)) +
  # ylim(0, 4) +
  theme_bw()
```

### Zero-Inflated 

#### Nitrate

```{r}
#| error: false
fit_no3 <- glmmTMB(
    no3 ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id),
    zi = ~ treatment,
    family = glmmTMB::lognormal(link = "log"),
    data = df_model
)

S(fit_nitrate)

simulationOutput <- simulateResiduals(fittedModel = fit_nitrate, n = 500)
plot(simulationOutput)

testUniformity(simulationOutput)
testOutliers(simulationOutput)

testDispersion(simulationOutput)
testZeroInflation(simulationOutput)

library(ggeffects)
library(RColorBrewer)
pred_effects <- ggpredict(fit_nitrate, terms = c("date", "treatment"))
plot(pred_effects, colors = "flat") +
  theme_bw() +
  labs(
    x = "Date",
    y = "Nitrate",
    title = "Predicted Values of Nitrate",
    color = "Treatment"
  )

print(pred_effects)
```

#### NH4

```{r}
fit_nh4 <- glmmTMB(
    nh4 ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id),
    zi = ~ treatment,
    family = glmmTMB::lognormal(link = "log"),
    data = df_model
)

S(fit_nh4)

simulationOutput <- simulateResiduals(fittedModel = fit_nh4, n = 500)
plot(simulationOutput)

testUniformity(simulationOutput)
testOutliers(simulationOutput)

testDispersion(simulationOutput)
testZeroInflation(simulationOutput)

library(ggeffects)
library(RColorBrewer)
pred_effects <- ggpredict(fit_nh4, terms = c("date", "treatment"))
plot(pred_effects, colors = "flat") + 
  theme_bw() +
  labs(
    x = "Date",
    y = "NH4",
    title = "Predicted Values of NH4",
    color = "Treatment"
  )

print(pred_effects)
```

#### Mg

```{r}
fit_mg <- glmmTMB(
    mg ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id),
    zi = ~ treatment,
    family = glmmTMB::lognormal(link = "log"),
    data = df_model
)

S(fit_mg)

simulationOutput <- simulateResiduals(fittedModel = fit_mg, n = 500)
plot(simulationOutput)

testUniformity(simulationOutput)
testOutliers(simulationOutput)

testDispersion(simulationOutput)
testZeroInflation(simulationOutput)

library(ggeffects)
library(RColorBrewer)
pred_effects <- ggpredict(fit_mg, terms = c("date", "treatment"))
plot(pred_effects, colors = "flat") +
  theme_bw() +
  labs(
    x = "Date",
    y = "Mg",
    title = "Predicted Values of Mg",
    color = "Treatment"
  )

print(pred_effects)
```

#### P

```{r}
fit_p <- glmmTMB(
    p ~ date * treatment + (1 | site_block_id) + (1 | trt_site_block_id),
    zi = ~ treatment,
    family = glmmTMB::lognormal(link = "log"),
    data = df_model
)

S(fit_p)

simulationOutput <- simulateResiduals(fittedModel = fit_p, n = 500)
plot(simulationOutput)

testUniformity(simulationOutput)
testOutliers(simulationOutput)

testDispersion(simulationOutput)
testZeroInflation(simulationOutput)

library(ggeffects)
library(RColorBrewer)
pred_effects <- ggpredict(fit_p, terms = c("date", "treatment"))
plot(pred_effects, colors = "flat") + 
  theme_bw() +
  labs(
    x = "Date",
    y = "P",
    title = "Predicted Values of P",
    color = "Treatment"
  )
```
