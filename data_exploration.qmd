---
title: "EDA"
author: "Andrew Kerr"
format: html
editor: source
toc: true
code-fold: true
embed-resources: true
---

## Set-up

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(janitor)
library(readxl)
library(writexl)
library(patchwork)
library(glmmTMB)
library(car)
library(emmeans)
library(nlme)
library(lmerTest)
```

## Data Read-in

### Convert 3 .csv to 1 Excel File (DO NOT NEED TO RUN)

```{r}
#| message: false
#| eval: false
df_combined <- read_csv(here::here("data", "Combined_Master.csv")) %>% clean_names()
df_year_1 <- read_csv(here::here("data", "Year1_Master.csv")) %>% clean_names()
df_year_2 <- read_csv(here::here("data", "Year2_Master.csv")) %>% clean_names()

# Change date format
df_combined <- df_combined %>%
  select(-bad_date) %>% # Remove unnecessary column
  mutate(date = as.Date(date, format="%m_%d_%Y"))

df_year_1 <- df_year_1 %>%
  mutate(date = as.Date(date, format="%m_%d_%Y"))

df_year_2 <- df_year_2 %>%
  mutate(date = as.Date(date, format="%m_%d_%Y"))

# Save as single Excel File
out <- list("combined" = df_combined, "year_1" = df_year_1, "year_2" = df_year_2)
write_xlsx(out, "data/Master.xlsx")
```

### Read-in Data from Excel File

```{r}
df_combined <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "combined")
df_year_1 <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "year_1")
df_year_2 <- read_xlsx(here::here("data", "Master.xlsx"), sheet = "year_2")
```

```{r}
df_combined <- df_combined %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )

df_year_1 <- df_year_1 %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )

df_year_2 <- df_year_2 %>%
  mutate(
    sample_id = as.factor(sample_id),
    site = as.factor(site),
    block = as.factor(block),
    study_year = as.factor(study_year)
  )
```

## EDA

### Create Datasets where LOD is 0 or NA

```{r}
#| warning: false
response_vars <- c("nh4", "nitrate", "mg", "p", "ec", "p_h")

df_combined_LOD_0 <- df_combined %>%
    mutate(across(
    all_of(response_vars), 
    ~ {
      # Replace "LOD" with 0
      x <- ifelse(.x == "LOD", 0, .x)
      as.numeric(x)
    }
  ))

df_combined_LOD_NA <- df_combined %>%
    mutate(across(
    all_of(response_vars), 
    ~ {
      # Replace "LOD" with NA
      x <- ifelse(.x == "LOD", NA, .x)
      as.numeric(x)
    }
  ))
```

### Count of Zeros

```{r}
prop_zero_0 <- df_combined_LOD_0 %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_zero")

prop_zero_NA <- df_combined_LOD_NA %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x == 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_zero")

prop_zero_0 %>%
  left_join(prop_zero_NA, by = "response", suffix = c("_0", "_NA")) %>%
  arrange(-prop_zero_0)
```

### Negative Values

```{r}
prop_neg_0 <- df_combined_LOD_0 %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x < 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_negative")

prop_neg_NA <- df_combined_LOD_NA %>%
  summarise(across(
    all_of(response_vars), 
    ~ {
      x <- mean(.x < 0, na.rm = T)
      }
    )) %>%
  pivot_longer(cols = everything(), names_to = "response", values_to = "prop_negative")

prop_neg_0 %>%
  left_join(prop_neg_NA, by = "response", suffix = c("_0", "_NA")) %>%
  arrange(-prop_negative_0)
```

### Concentration by Treatment Box Plots

```{r}
#| fig.width: 14
#| fig.height: 10
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}

plot_concentration <- function(r, data) {
  data %>% 
    filter(.data[[r]] > 0) %>%
    ggplot(aes(x = treatment, y = .data[[r]], fill = treatment)) +
      geom_boxplot(alpha = 0.7) +
      geom_point(alpha = 0.3) +
      facet_wrap(vars(study_year), scales = "free") +
      labs(title = paste0(capwords(r), " Concentration (Non-Zero) by Treatment"), x = "Treatment", y = capwords(r)) +
      theme_bw()
}

plots_0 <- map(response_vars, plot_concentration, data = df_combined_LOD_0)
wrap_plots(plots_0, ncol = 2, guides = "collect")

# It will be the same since we are plotting non-zeros
# plots_NA <- map(response_vars, plot_concentration, data = df_combined_LOD_NA)
# wrap_plots(plots_NA, ncol = 2, guides = "collect")
```


### Plot Response Variables Over Time

```{r}
#| warning: false
#| fig.width: 14
#| fig.height: 10
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s, 1, 1)),
                  {s <- substring(s, 2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}

plot_response <- function(r, data, by) {
  data %>%
    ggplot(aes(x = date, y = .data[[r]], color = .data[[by]])) +
    facet_wrap(vars(study_year), scales = "free") +
    geom_point() +
    geom_line() +
    theme_bw(base_size = 12) +
    theme(legend.position = "none") +
    labs(
      title = paste0(capwords(r), " Over Time"),
      x = "Date"
    )
}
  
plots_0 <- map(response_vars, plot_response, data = df_combined_LOD_0, by = "sample_id")
wrap_plots(plots_0, ncol = 2)

plots_NA <- map(response_vars, plot_response, data = df_combined_LOD_NA, by = "sample_id")
wrap_plots(plots_NA, ncol = 2)
```

## Models

### Responses with no Zeros

#### EC

```{r}
fit_lmer <- lmer(

  ec ~
    factor(date)*treatment +
    (1 | site:block) +
    (1 | treatment:site:block),

  data = df_combined_LOD_0 %>% filter(study_year == 1)
  )

Anova(fit_lmer)

plot(fitted(fit_lmer), residuals(fit_lmer),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)
```

```{r}
df_model <- df_combined_LOD_0 %>%
  filter(study_year == 1) %>%
  mutate(
    date = factor(date),
    treatment = factor(treatment),
    site = factor(site),
    block = factor(block),
    
    # Create combined grouping factors
    site_block_id = interaction(site, block, drop = TRUE),
    trt_site_block_id = interaction(treatment, site, block, drop = TRUE)
  )

fit_lme <- lme(
  fixed = ec ~ date * treatment,
  random = list(
    site_block_id = ~ 1, # Random intercept for site:block combinations
    trt_site_block_id = ~ 1 # Random intercept for treatment:site:block combinations
  ),
  data = df_model,
  na.action = na.exclude
)

Anova(fit_lme)

plot(fitted(fit_lme), residuals(fit_lme),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)
```

```{r}
fit_glmer_gamma <- glmer(
  ec ~ as.factor(date) * treatment +
    (1 | site:block) +
    (1 | treatment:site:block),
  data = df_combined_LOD_0 %>% filter(study_year == 1),
  family = Gamma(link = "log")
)

summary(fit_glmer_gamma)

sim_res_gamma <- DHARMa::simulateResiduals(fit_glmer_gamma, plot = TRUE)

plot(fitted(fit_glmer_gamma), residuals(fit_glmer_gamma),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)
```

#### Ph

```{r}
fit_lme <- lme(
  fixed = p_h ~ as.factor(date) * treatment,
  random = list(
    site_block_id = ~ 1, # Random intercept for site:block combinations
    trt_site_block_id = ~ 1 # Random intercept for treatment:site:block combinations
  ),
  data = df_model,
  na.action = na.exclude
)

plot(fitted(fit_lme), residuals(fit_lme),
     xlab = "Fitted Values",
     ylab = "Residuals",
     main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lty = 2)
```

### Zero-Inflated 

```{r}
fit <- glmmTMB(
    p ~ as.factor(date) * treatment + (1 | site:block:study_year) + (1 | site:block),
    zi = ~ .,
    family = lognormal(link = "log"),
    data = df_combined_LOD_0
)

summary(fit)
```

