---
title: "P"
format: html
editor: visual
---

## Packages

```{r}
#install.packages("tidyverse")
#install.packages("dplyr")
#install.packages("agricolae")
#install.packages("plotrix")
#install.packages("rstatix")
#install.packages("ggpubr")
#install.packages("emmeans") 
#install.packages("multcomp")
library(multcomp)
library(emmeans)   
library(MASS)
library(lme4)
library(ggpubr)
library(rstatix)
library(plotrix)
library(tidyverse)
library(dbplyr)
library(agricolae)

```

```{r}

DF <-read.csv("Year2_Master.csv", header=T)

DF <- DF[, !(names(DF) %in% c("X", "X.1","X.2","X.3","X.4","X.5"))]

DF$NH4[DF$NH4=="LOD"]<-0
DF$Nitrate[DF$Nitrate=="LOD"]<-0
DF$Mg[DF$Mg=="LOD"]<-0
DF$P[DF$P=="LOD"]<-0

DF$Nitrate[DF$Nitrate < 0] <- 0

DF <- DF[!is.na(DF$P), ]

DF <- DF %>%
  mutate(id = row_number())

DF$NH4  <- as.numeric(DF$NH4)  
DF$Nitrate  <- as.numeric(DF$Nitrate)
DF$Mg  <- as.numeric(DF$Mg)  
DF$P  <- as.numeric(DF$P)
DF$EC  <- as.numeric(DF$EC)
DF$pH  <- as.numeric(DF$pH)



DF$Treatment  <- as.factor(DF$Treatment) 
DF$Block  <- as.factor(DF$Block) 
DF$Site  <- as.factor(DF$Site) 
DF$Study.Year  <- as.factor(DF$Study.Year)

DF$Date <- as.Date(DF$Date, format = "%m_%d_%Y")

DF$Date_Formatted <- format(DF$Date, "%m-%d-%Y")
                      
                    
```

Checking Site By Treatment

```{r}
library(lmerTest)
Sitemodel<- lmer(P ~ Treatment * Site + (1 |Site: Block), data = DF)

anova(Sitemodel, type = 3)
```

GLmmTMB models

```{r}
library("lme4")
DF$Date_scaled <- scale(as.numeric(DF$Date))
DF <- DF[!is.na(DF$P), ]

library(glmmTMB)

P_model <- glmmTMB(P ~ Treatment * Date_scaled * Site + (1 | Site:Block),
                     ziformula = ~1,
                     family = ziGamma(link = "log"),
                     data = DF)
summary(P_model)
Anova(P_model, type = 3)

em <- emmeans(P_model, pairwise ~ Treatment|Site, adjust = "tukey", type = "response")
cld(em$emmeans, adjust = "tukey")

library(DHARMa)

# Simulate residuals from the fitted model
sim_res <- simulateResiduals(fittedModel = P_model)

# Plot residuals
plot(sim_res)
```

Linear Mixed Effects Model

```{r}
DF$Date_scaled <- scale(as.numeric(DF$Date))

P_model <- lmer(P ~ Treatment * Date_scaled * Site + (1 |Site:Block), data = DF)
anova(P_model, type = 3)

em <- emmeans::emmeans(P_model, pairwise ~ Treatment, adjust = "tukey")
cld(em$emmeans, adjust="tukey")

shapiro.test(resid(P_model))

qqnorm(resid(P_model))
qqline(resid(P_model),col="red",lwd=2)

df_res <- data.frame(
  Fitted = fitted(P_model),
  Residuals = resid(P_model)
)

ggplot(df_res, aes(x = Fitted, y = Residuals)) +
  geom_point(alpha = 0.6) +
  geom_hline(yintercept = 0, color = "red", linetype = "dashed") +
  geom_smooth(method = "loess", se = FALSE, color = "blue") +
  labs(title = "Residuals vs Fitted", x = "Fitted values", y = "Residuals") +
  theme_minimal()

```

Data Visualization P

```{r}
df.summaryP <- DF %>%
  group_by(Treatment, Date) %>%
  summarize(
    sd=sd(P, na.rm = TRUE),
    se=(sd/(sqrt(length(P)))),
    #se.1=std.error(Mg), 
    Pmean = mean(P, na.rm = TRUE)
    )
df.summaryP

Ptime<-ggplot(df.summaryP, aes(Date, Pmean, color = Treatment)) +
  geom_jitter(position = position_jitter(0.2)) + 
  geom_line(aes(group = Treatment),data = df.summaryP) +
  geom_jitter(
    position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.8)
  )+
  geom_errorbar(aes(ymin = Pmean-se, ymax = Pmean+se), data = df.summaryP, width = 0.2)+
 
  theme(legend.position = "top")+
  ylab("Phosphorus (mg/L)")




Psum<-ggplot(df.summaryP, aes(x = Treatment, y = Pmean, fill = Treatment)) + 
  # Boxplot with customized whisker color
  geom_boxplot(
    outlier.shape = NA,   # Remove outliers from the plot
    whisker.col = "blue", # Set whisker color (adjust as needed)
    notch = FALSE         # Remove notches (optional)
  ) +
  labs(
    x = "Treatment",
    y = "Average Phosphorus (mg/L)",
    fill = "Treatment"
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

ggsave("Ptime.png", plot = Ptime, width = 8, height = 5, dpi = 300)
  ggsave("Psum.png", plot = Psum, width = 8, height = 5, dpi = 300)

  print(Psum)
print(Ptime)



```

FLUX analysis

```{r}
library("pracma")
DF$Time <- as.numeric(DF$Date- min(DF$Date)) 



df_integral <- DF %>%
  drop_na(P, Time) %>%
  group_by(Block,Treatment,Site) %>%
  filter(n() >= 2) %>%
  group_modify(~ {
    tibble(
      Total_P= trapz(.x$Time, .x$P),
      Points_Used = nrow(.x)
    )
  })



library(lme4)
P_model <- glmer(Total_P ~ Treatment + Site + (1|Site:Block), 
                 data = df_integral,
                 family = "Gamma")

em <- emmeans::emmeans(P_model, pairwise ~ Treatment, adjust = "tukey", type = "response")
cld(em$emmeans, adjust="tukey")
emmip(P_model, ~ Treatment, CIs = T, type = "response")

summary(P_model)
anova(P_model)
Anova(P_model)
plot(P_model)

Pflux<-ggplot(df_integral, aes(Treatment, Total_P)) +
  geom_boxplot(aes(fill = Treatment), width = 0.6, outlier.shape = NA, alpha = 0.2) +
  geom_jitter(width = 0.1, alpha = 0.5) +
  labs(y = "Total Phosphate Flux (mg/L × days)",
       title = paste("Treatment Effects (F =", round(anova(P_model)$"F value"[1], 2), ")")) +
  theme_minimal()

  ggsave("Pflux.png", plot = Pflux, width = 8, height = 5, dpi = 300)
  
emmip(P_model, ~ Treatment, CIs = T, type = "response")
print(Pflux)



```

FLUX Stats analysis

```{r}
library(ggpubr)
library(rstatix)

df_integral <- data.frame(
  Treatment = df_integral$Treatment,  # Explicitly reference column
  Total_P = df_integral$Total_P,
  Block = df_integral$Block  # Include other columns as needed
)



# Parametric (t-tests with adjusted p-values)
pairwise_results <- df_integral %>%
  t_test(Total_P ~ Treatment, p.adjust.method = "BH") %>%
  add_xy_position(x = "Treatment")

# Non-parametric alternative (if needed)
wilcox_results <- df_integral %>%
  wilcox_test(Total_P ~ Treatment, p.adjust.method = "BH")

ggplot(df_integral, aes(Treatment, Total_P)) +
  geom_boxplot(aes(fill = Treatment), width = 0.6, show.legend = FALSE) +
  stat_pvalue_manual(
    pairwise_results,
    label = "p.adj", 
    tip.length = 0.01,
    step.increase = 0.1
  ) +
  labs(
    y = "Total Phosphate Flux (mg/L × days)",
    title = "Pairwise Treatment Comparisons"
  ) +
  theme_minimal()
```
